{% extends 'base.html.twig' %}

{% block title %}Hello CompositionController!{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('styles/composition/index.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap" rel="stylesheet">
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
{% endblock %}

{% block body %}
    <div class="team-container">
        <div class="background">
            <div class="joueurs-titulaires">
                <div class="ligne premiere-ligne">
                    {% for i in 1..3 %}
                        <div class="player-square" data-position="{{ i }}"></div>
                    {% endfor %}
                </div>
                <div class="ligne deuxieme-ligne">
                    {% for i in 4..5 %}
                        <div class="player-square" data-position="{{ i }}"></div>
                    {% endfor %}
                </div>
                <div class="ligne troisieme-ligne">
                        <div class="player-square" data-position="{{ 7 }}"></div>
                        <div class="player-square" data-position="{{ 8 }}"></div>
                        <div class="player-square" data-position="{{ 6 }}"></div>
                </div>
                <div class="ligne charniere">
                    {% for i in 9..10 %}
                        <div class="player-square" data-position="{{ i }}"></div>
                    {% endfor %}
                </div>
                <div class="ligne trois-quarts">
                    {% for i in 11..14 %}
                        <div class="player-square" data-position="{{ i }}"></div>
                    {% endfor %}
                </div>
                <div class="ligne arriere">
                    <div class="player-square" data-position="15"></div>
                </div>
            </div>
        </div>

        <div class="remplacants-container">
            <h2 style="position: absolute;top:0;">Impact Players</h2>
            <div class="remplacants">
                {% for i in 16..22 %}
                    <div class="player-square" data-position="{{ i }}"></div>
                {% endfor %}
            </div>
        </div>
    </div>
    <div class="player-list">
        <h2>Liste des joueurs</h2>
        <input type="text" id="search-bar" placeholder="Rechercher un joueur...">
        <ul id="player-list">
            {% for player in players %}
                <li draggable="true" id="{{ player.id }}" data-nom="{{ player.lastname }}" data-prenom="{{ player.firstname }}">
                    {{ player.lastname }} {{ player.firstname }}
                </li>
            {% endfor %}
            <div class="pagination-controls">
                <button id="prev-page" disabled>Précédent</button>
                <span id="page-info"></span>
                <button id="next-page">Suivant</button>
            </div>
            <button id="export-button">Exporter la composition</button>
        </ul>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            const players = document.querySelectorAll('.player-list li');
            const squares = document.querySelectorAll('.player-square');
            const searchBar = document.getElementById('search-bar');
            const exportButton = document.getElementById('export-button');
            const prevPageButton = document.getElementById('prev-page');
            const nextPageButton = document.getElementById('next-page');
            const pageInfo = document.getElementById('page-info');

            const playersPerPage = 10;
            let currentPage = 1;
            let filteredPlayers = Array.from(players);
            const totalPages = () => Math.ceil(filteredPlayers.length / playersPerPage);

            function updatePlayerList() {
                const start = (currentPage - 1) * playersPerPage;
                const end = start + playersPerPage;

                players.forEach(player => player.style.display = 'none');
                filteredPlayers.slice(start, end).forEach(player => player.style.display = '');

                pageInfo.textContent = `Page ${currentPage} sur ${totalPages()}`;
                prevPageButton.disabled = currentPage === 1;
                nextPageButton.disabled = currentPage === totalPages();
            }

            prevPageButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    updatePlayerList();
                }
            });

            nextPageButton.addEventListener('click', () => {
                if (currentPage < totalPages()) {
                    currentPage++;
                    updatePlayerList();
                }
            });

            searchBar.addEventListener('input', (e) => {
                const searchTerm = e.target.value.toLowerCase();
                filteredPlayers = Array.from(players).filter(player => {
                    const playerName = player.getAttribute('data-nom').toLowerCase() + ' ' + player.getAttribute('data-prenom').toLowerCase();
                    return playerName.includes(searchTerm);
                });
                currentPage = 1; // Reset to first page on search
                updatePlayerList();
            });

            players.forEach(player => {
                player.addEventListener('dragstart', (e) => {
                    e.dataTransfer.setData('text/plain', player.id);
                });
            });

            squares.forEach(square => {
                square.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    square.classList.add('drag-over');
                });

                square.addEventListener('dragleave', () => {
                    square.classList.remove('drag-over');
                });

                square.addEventListener('drop', (e) => {
                    e.preventDefault();
                    square.classList.remove('drag-over');
                    const playerId = e.dataTransfer.getData('text/plain');
                    const player = document.getElementById(playerId);
                    const playerName = player.getAttribute('data-prenom').charAt(0).toUpperCase() + "." + player.getAttribute('data-nom').toUpperCase();
                    const playerNumber = square.getAttribute('data-position');
                    if (square.closest('.remplacants-container')) {
                        square.innerHTML = `<img src="{{ asset("img/maillot-ardennes-rugby.png") }}" alt="${playerName}">
                <div class="substitute-name">
                <input class="number-input" value="${playerNumber}" min="1" max="99"></input><span> - ${playerName}</span>
                </div>
                <button class="delete-button">&times;</button>`;
                    } else {
                        square.innerHTML = `<img src="{{ asset("img/maillot-ardennes-rugby.png") }}" alt="${playerName}"><span>${playerNumber} - ${playerName}</span><button class="delete-button">&times;</button>`;
                    }
                    square.classList.add('no-border');

                    const deleteButton = square.querySelector('.delete-button');
                    deleteButton.addEventListener('click', () => {
                        square.innerHTML = '';
                        square.classList.remove('no-border');
                    });
                });
            });

            exportButton.addEventListener('click', () => {
                const playerNames = getPlayerNames();
                console.log('Players in the composition:', playerNames);

                // Stocker les valeurs originales des inputs et leurs parents
                const originalInputValues = {};
                const numberInputs = document.querySelectorAll('.number-input');
                numberInputs.forEach(input => {
                    originalInputValues[input.id] = {
                        value: input.value,
                        parent: input.parentNode // Stocker le parent de l'input
                    };
                });

                // Remplacer les inputs par du texte
                numberInputs.forEach(input => {
                    const playerNameSpan = input.nextElementSibling;
                    playerNameSpan.textContent = input.value + " - " + playerNameSpan.textContent.split(' - ')[1];
                    playerNameSpan.style.borderRadius = "5px";
                    input.remove();
                });

                // Remove delete buttons and borders for empty squares
                squares.forEach(square => {
                    const deleteButton = square.querySelector('.delete-button');
                    if (deleteButton) {
                        deleteButton.style.display = 'none';
                    }
                    if (!square.innerHTML.trim()) {
                        square.style.border = 'none';
                    }
                });

                // Use html2canvas to capture the composition
                html2canvas(document.querySelector('.team-container')).then(canvas => {
                    const link = document.createElement('a');
                    link.download = 'composition.png';
                    link.href = canvas.toDataURL('image/png');
                    link.click();

                    // Restore delete buttons and borders
                    squares.forEach(square => {
                        const deleteButton = square.querySelector('.delete-button');
                        if (deleteButton) {
                            deleteButton.style.display = 'block';
                        }
                        if (!square.innerHTML.trim()) {
                            square.style.border = '3px dashed white';
                        }
                    });

                    // Restaurer les inputs avec leurs valeurs originales
                    for (const inputId in originalInputValues) {
                        const { value, parent } = originalInputValues[inputId];
                        const playerNameSpan = parent.querySelector('span'); // Retrouver le span dans le parent
                        const playerName = playerNameSpan.textContent.split(' - ')[1];
                        playerNameSpan.textContent = " - " + playerName;
                        playerNameSpan.style.borderRadius = "0 5px 5px 0";
                        const newInput = document.createElement('input');
                        newInput.classList.add('number-input');
                        newInput.value = value;
                        newInput.min = 1;
                        newInput.max = 99;
                        newInput.style.borderRadius = "5px 0 0 5px";
                        parent.insertBefore(newInput, playerNameSpan);
                    }
                });
            });

            function getPlayerNames() {
                const playerSquares = document.querySelectorAll('.player-square');
                const playerNames = [];

                playerSquares.forEach(square => {
                    const playerNameElement = square.querySelector('span');
                    if (playerNameElement) {
                        const playerName = playerNameElement.textContent.split(' - ')[1];
                        if (playerName) {
                            playerNames.push(playerName);
                        }
                    }
                });

                return playerNames;
            }

            // Initialize player list display
            updatePlayerList();
        });
    </script>
{% endblock %}